// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tgbot/v1/tgbot.proto

package tgbotv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendPasswordResetCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendPasswordResetCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendPasswordResetCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendPasswordResetCodeRequestMultiError, or nil if none found.
func (m *SendPasswordResetCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendPasswordResetCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTelegramId() <= 0 {
		err := SendPasswordResetCodeRequestValidationError{
			field:  "TelegramId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 4 || l > 12 {
		err := SendPasswordResetCodeRequestValidationError{
			field:  "Code",
			reason: "value length must be between 4 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetTtlSeconds(); val < 60 || val > 3600 {
		err := SendPasswordResetCodeRequestValidationError{
			field:  "TtlSeconds",
			reason: "value must be inside range [60, 3600]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendPasswordResetCodeRequestMultiError(errors)
	}

	return nil
}

// SendPasswordResetCodeRequestMultiError is an error wrapping multiple
// validation errors returned by SendPasswordResetCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type SendPasswordResetCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendPasswordResetCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendPasswordResetCodeRequestMultiError) AllErrors() []error { return m }

// SendPasswordResetCodeRequestValidationError is the validation error returned
// by SendPasswordResetCodeRequest.Validate if the designated constraints
// aren't met.
type SendPasswordResetCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPasswordResetCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPasswordResetCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPasswordResetCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPasswordResetCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPasswordResetCodeRequestValidationError) ErrorName() string {
	return "SendPasswordResetCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendPasswordResetCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPasswordResetCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPasswordResetCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPasswordResetCodeRequestValidationError{}

// Validate checks the field values on SendVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerificationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerificationCodeRequestMultiError, or nil if none found.
func (m *SendVerificationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerificationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTelegramId() <= 0 {
		err := SendVerificationCodeRequestValidationError{
			field:  "TelegramId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 4 || l > 12 {
		err := SendVerificationCodeRequestValidationError{
			field:  "Code",
			reason: "value length must be between 4 and 12 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _SendVerificationCodeRequest_Purpose_InLookup[m.GetPurpose()]; !ok {
		err := SendVerificationCodeRequestValidationError{
			field:  "Purpose",
			reason: "value must be in list [signup change_phone]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetTtlSeconds(); val < 60 || val > 3600 {
		err := SendVerificationCodeRequestValidationError{
			field:  "TtlSeconds",
			reason: "value must be inside range [60, 3600]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendVerificationCodeRequestMultiError(errors)
	}

	return nil
}

// SendVerificationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by SendVerificationCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type SendVerificationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerificationCodeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerificationCodeRequestMultiError) AllErrors() []error { return m }

// SendVerificationCodeRequestValidationError is the validation error returned
// by SendVerificationCodeRequest.Validate if the designated constraints
// aren't met.
type SendVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerificationCodeRequestValidationError) ErrorName() string {
	return "SendVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerificationCodeRequestValidationError{}

var _SendVerificationCodeRequest_Purpose_InLookup = map[string]struct{}{
	"signup":       {},
	"change_phone": {},
}

// Validate checks the field values on SendNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationRequestMultiError, or nil if none found.
func (m *SendNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTelegramId() <= 0 {
		err := SendNotificationRequestValidationError{
			field:  "TelegramId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetMessage()); l < 1 || l > 4096 {
		err := SendNotificationRequestValidationError{
			field:  "Message",
			reason: "value length must be between 1 and 4096 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendNotificationRequestMultiError(errors)
	}

	return nil
}

// SendNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by SendNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationRequestMultiError) AllErrors() []error { return m }

// SendNotificationRequestValidationError is the validation error returned by
// SendNotificationRequest.Validate if the designated constraints aren't met.
type SendNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationRequestValidationError) ErrorName() string {
	return "SendNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationRequestValidationError{}
