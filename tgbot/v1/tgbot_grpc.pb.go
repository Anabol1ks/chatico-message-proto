// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: tgbot/v1/tgbot.proto

package tgbotv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TgBotService_SendPasswordResetCode_FullMethodName = "/tgbot.v1.TgBotService/SendPasswordResetCode"
	TgBotService_SendVerificationCode_FullMethodName  = "/tgbot.v1.TgBotService/SendVerificationCode"
	TgBotService_SendNotification_FullMethodName      = "/tgbot.v1.TgBotService/SendNotification"
)

// TgBotServiceClient is the client API for TgBotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для отправки сообщений через Telegram-бота
type TgBotServiceClient interface {
	// Отправить код сброса пароля
	SendPasswordResetCode(ctx context.Context, in *SendPasswordResetCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Отправить код подтверждения (например, для регистрации/смены телефона)
	SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Отправить произвольное уведомление
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tgBotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTgBotServiceClient(cc grpc.ClientConnInterface) TgBotServiceClient {
	return &tgBotServiceClient{cc}
}

func (c *tgBotServiceClient) SendPasswordResetCode(ctx context.Context, in *SendPasswordResetCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TgBotService_SendPasswordResetCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgBotServiceClient) SendVerificationCode(ctx context.Context, in *SendVerificationCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TgBotService_SendVerificationCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tgBotServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TgBotService_SendNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TgBotServiceServer is the server API for TgBotService service.
// All implementations must embed UnimplementedTgBotServiceServer
// for forward compatibility.
//
// Сервис для отправки сообщений через Telegram-бота
type TgBotServiceServer interface {
	// Отправить код сброса пароля
	SendPasswordResetCode(context.Context, *SendPasswordResetCodeRequest) (*emptypb.Empty, error)
	// Отправить код подтверждения (например, для регистрации/смены телефона)
	SendVerificationCode(context.Context, *SendVerificationCodeRequest) (*emptypb.Empty, error)
	// Отправить произвольное уведомление
	SendNotification(context.Context, *SendNotificationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTgBotServiceServer()
}

// UnimplementedTgBotServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTgBotServiceServer struct{}

func (UnimplementedTgBotServiceServer) SendPasswordResetCode(context.Context, *SendPasswordResetCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPasswordResetCode not implemented")
}
func (UnimplementedTgBotServiceServer) SendVerificationCode(context.Context, *SendVerificationCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerificationCode not implemented")
}
func (UnimplementedTgBotServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedTgBotServiceServer) mustEmbedUnimplementedTgBotServiceServer() {}
func (UnimplementedTgBotServiceServer) testEmbeddedByValue()                      {}

// UnsafeTgBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TgBotServiceServer will
// result in compilation errors.
type UnsafeTgBotServiceServer interface {
	mustEmbedUnimplementedTgBotServiceServer()
}

func RegisterTgBotServiceServer(s grpc.ServiceRegistrar, srv TgBotServiceServer) {
	// If the following call pancis, it indicates UnimplementedTgBotServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TgBotService_ServiceDesc, srv)
}

func _TgBotService_SendPasswordResetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPasswordResetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgBotServiceServer).SendPasswordResetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgBotService_SendPasswordResetCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgBotServiceServer).SendPasswordResetCode(ctx, req.(*SendPasswordResetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TgBotService_SendVerificationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerificationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgBotServiceServer).SendVerificationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgBotService_SendVerificationCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgBotServiceServer).SendVerificationCode(ctx, req.(*SendVerificationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TgBotService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TgBotServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TgBotService_SendNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TgBotServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TgBotService_ServiceDesc is the grpc.ServiceDesc for TgBotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TgBotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tgbot.v1.TgBotService",
	HandlerType: (*TgBotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendPasswordResetCode",
			Handler:    _TgBotService_SendPasswordResetCode_Handler,
		},
		{
			MethodName: "SendVerificationCode",
			Handler:    _TgBotService_SendVerificationCode_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _TgBotService_SendNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tgbot/v1/tgbot.proto",
}
